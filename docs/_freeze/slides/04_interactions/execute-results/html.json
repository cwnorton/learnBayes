{
  "hash": "1d169142490c318c68aa9d3157b1deaa",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introduction to Bayesian Linear Models\"\nsubtitle: \"04 - Interactions\"\nauthor: \"Stefano Coretta\"\ninstitute: \"University of Edinburgh\"\neditor: source\nformat:\n  mono-light-revealjs:\n    theme: [default, custom.scss]\n    history: false\nfilters:\n  - tachyonsextra\nexecute: \n  echo: true\n---\n\n\n\n::: {.cell}\n\n:::\n\n\n## Interactions: the traditional way\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbrm_4 <- brm(\n  # RT ~ IsWord + PhoneLev + IsWord:PhonLev\n  RT ~ IsWord * PhonLev,\n  family = gaussian,\n  data = mald,\n  cores = 4,\n  file = \"data/cache/brm_4\",\n  seed = my_seed\n)\n```\n:::\n\n\n\n## Interactions: the traditional way (model summary)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbrm_4\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: RT ~ IsWord * PhonLev \n   Data: mald (Number of observations: 3000) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nRegression Coefficients:\n                    Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nIntercept             756.43     46.72   664.91   847.91 1.00     1659     2339\nIsWordFALSE           233.39     67.38    99.57   364.92 1.01     1435     1596\nPhonLev                31.85      6.52    19.11    44.57 1.00     1633     2368\nIsWordFALSE:PhonLev   -14.36      9.30   -32.23     4.09 1.00     1409     1692\n\nFurther Distributional Parameters:\n      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsigma   339.71      4.26   331.39   348.18 1.00     2936     2600\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n```\n\n\n:::\n:::\n\n\n## Interactions: no intercept\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbrm_4a <- brm(\n  RT ~ 0 + IsWord + IsWord:PhonLev,\n  family = gaussian,\n  data = mald,\n  cores = 4,\n  file = \"data/cache/brm_4a\",\n  seed = my_seed\n)\n```\n:::\n\n\n\n## Interactions: no intercept (model summary)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbrm_4a\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: RT ~ 0 + IsWord + IsWord:PhonLev \n   Data: mald (Number of observations: 3000) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nRegression Coefficients:\n                    Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nIsWordTRUE            757.23     48.11   659.92   849.49 1.00     1809     1888\nIsWordFALSE           989.60     49.66   893.35  1089.27 1.00     1776     1971\nIsWordTRUE:PhonLev     31.75      6.71    18.79    44.99 1.00     1779     1948\nIsWordFALSE:PhonLev    17.51      6.86     3.67    31.05 1.00     1839     1988\n\nFurther Distributional Parameters:\n      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsigma   339.52      4.29   330.97   347.98 1.00     2941     2292\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n```\n\n\n:::\n:::\n\n\n## Conditional posterior probabilities\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconditional_effects(brm_4a, \"PhonLev:IsWord\")\n```\n\n::: {.cell-output-display}\n![](04_interactions_files/figure-revealjs/brm-4a-cond-1.png){width=960}\n:::\n:::\n\n\n## Conditional posterior probabilities: spaghetti\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbrm_4a_condp <- conditional_effects(brm_4a, \"PhonLev:IsWord\", spaghetti = TRUE, ndraws = 100)\nplot(brm_4a_condp, plot = FALSE, spaghetti_args = list(linewidth = 2))[[1]] +\n  theme(\n    plot.background = element_rect(fill = \"black\"),\n    text = element_text(colour = \"white\")\n  )\n```\n\n::: {.cell-output-display}\n![](04_interactions_files/figure-revealjs/brm-4a-cond-2-1.png){width=960}\n:::\n:::\n\n\n## Conditional posteriors at specific values\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconds <- tibble(\n  PhonLev = c(7.5, 10),\n  cond__ = c(\"PhonLev = 7.5\", \"PhonLev = 10\")\n)\n\nconditional_effects(brm_4a, \"IsWord\", conditions = conds)\n```\n\n::: {.cell-output-display}\n![](04_interactions_files/figure-revealjs/brm-4a-cond-3-1.png){width=960}\n:::\n:::\n\n\n## Comparisons (aka contrasts) at specific values\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# library(marginaleffects)\n\ncomparisons(brm_4a, variables = \"IsWord\", newdata = datagrid(PhonLev = c(7.5, 10, 12)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n   Term     Contrast PhonLev Estimate 2.5 % 97.5 % IsWord\n IsWord FALSE - TRUE     7.5    125.8 100.3    151   TRUE\n IsWord FALSE - TRUE    10.0     90.0  31.2    150   TRUE\n IsWord FALSE - TRUE    12.0     62.1 -32.5    155   TRUE\n\nColumns: rowid, term, contrast, estimate, conf.low, conf.high, PhonLev, predicted_lo, predicted_hi, predicted, tmp_idx, RT, IsWord \nType:  response \n```\n\n\n:::\n:::\n\n\n## Comparisons (aka contrasts): 70% CrI\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncomparisons(brm_4a, variables = \"IsWord\", newdata = datagrid(PhonLev = c(7.5, 10, 12)), conf_level = 0.7)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n   Term     Contrast PhonLev Estimate 15.0 % 85.0 % IsWord\n IsWord FALSE - TRUE     7.5    125.8  112.2    139   TRUE\n IsWord FALSE - TRUE    10.0     90.0   58.6    121   TRUE\n IsWord FALSE - TRUE    12.0     62.1   11.4    111   TRUE\n\nColumns: rowid, term, contrast, estimate, conf.low, conf.high, PhonLev, predicted_lo, predicted_hi, predicted, tmp_idx, RT, IsWord \nType:  response \n```\n\n\n:::\n:::\n\n\n## Comparisons (aka contrasts) along `PhonLev`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_comparisons(brm_4a, variables = \"IsWord\", condition = \"PhonLev\", conf_level = 0.7)\n```\n\n::: {.cell-output-display}\n![](04_interactions_files/figure-revealjs/brm-4a-comp-phonlev-1.png){width=960}\n:::\n:::\n\n\n\n\n## Interactions: priors\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_prior(\n  RT ~ IsWord * PhonLev,\n  family = gaussian,\n  data = mald\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                    prior     class                coef group resp dpar nlpar\n                   (flat)         b                                          \n                   (flat)         b         IsWordFALSE                      \n                   (flat)         b IsWordFALSE:PhonLev                      \n                   (flat)         b             PhonLev                      \n student_t(3, 952, 220.9) Intercept                                          \n   student_t(3, 0, 220.9)     sigma                                          \n lb ub       source\n            default\n       (vectorized)\n       (vectorized)\n       (vectorized)\n            default\n  0         default\n```\n\n\n:::\n:::\n\n\n## Interactions: priors with no intercept\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_prior(\n  RT ~ 0 + IsWord + IsWord:PhonLev,\n  family = gaussian,\n  data = mald\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                  prior class                coef group resp dpar nlpar lb ub\n                 (flat)     b                                                \n                 (flat)     b         IsWordFALSE                            \n                 (flat)     b IsWordFALSE:PhonLev                            \n                 (flat)     b          IsWordTRUE                            \n                 (flat)     b  IsWordTRUE:PhonLev                            \n student_t(3, 0, 220.9) sigma                                            0   \n       source\n      default\n (vectorized)\n (vectorized)\n (vectorized)\n (vectorized)\n      default\n```\n\n\n:::\n:::\n",
    "supporting": [
      "04_interactions_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}